# -*- coding: utf-8 -*-
"""ADSTI_EX20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14rgL8fWZ1f0aNgpgucZveBXLISB9w5CZ

# **Carregamento**
"""

#Carregamento do dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("kc_house_data.csv", "wb").write (src)

"""# **Uso**"""

#Leitura do dataset para um DataFrame:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
print (type (dataset))
dataset.head ()

"""# **.ISNULL**"""

#Identificar valores faltantes como True:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.isnull ()

#Contar os valores faltantes por coluna:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.isnull ().sum ()

"""# **.dropna ()**"""

#Remover os registros com valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (inplace = True)
dataset.isnull ().sum ()

#Remover os registros com valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
aux = dataset.dropna (inplace = False)
print ("Valores faltantes no DataFrame original: ")
print (dataset.isnull ().sum ())
print ("\n\nValores faltantes no DataFrame auxiliar: ")
print (aux.isnull ().sum ())

#Remover registros em que há pelo menos um valor faltante:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (how = "any", inplace = True)
dataset.isnull ().sum ()

#Remover registros em que todas as colunas possuem valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (how = "all", inplace = True)
dataset.isnull ().sum ()

#Remover os registros (linhas) em que as colunas possuem valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (axis = 0, inplace = True)
dataset.isnull ().sum ()

#Remover os registros (linhas) em que as colunas possuem valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (axis = "index", inplace = True)
dataset.isnull ().sum ()

#Remover as colunas que possuem valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (axis = 1, inplace = True)
dataset.isnull ().sum ()

#Remover as colunas que possuem valores faltantes:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.dropna (axis = "columns", inplace = True)
dataset.isnull ().sum ()

#Substituir valores faltantes pela constante 1:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset.fillna (1, inplace = True)
dataset.isnull ().sum ()

#Substituir valores faltantes na coluna bedrooms pela constante 1:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset["bedrooms"].fillna (1, inplace = True)
dataset.isnull ().sum ()

#Substituir os valores faltantes da coluna "floors" pela média aritmética dos valores encontrados nessa coluna:
import pandas as pd
dataset = pd.read_csv ("kc_house_data.csv", sep = ",")
dataset["floors"].fillna (dataset["floors"].mean (), inplace = True)
dataset.isnull ().sum ()

"""# **Exercício**

# **Carregamento**
"""

#Carregamento do primeiro dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("datasets_549702_1228846_brazil_covid19.csv", "wb").write (src)

#Carregamento do segundo dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("brazil_covid19_cities.csv", "wb").write (src)

"""# **Uso**"""

#Leitura do dataset do brazil para um DataFrame:
import pandas as pd
brazil = pd.read_csv ("datasets_549702_1228846_brazil_covid19.csv", sep = ",")
print (type (brazil))

#Leitura do dataset do cidades para um DataFrame:
import pandas as pd
cities = pd.read_csv ("brazil_covid19_cities.csv", sep = ",")
print (type (cities))

"""3. Apresentar os registros resultantes do "INNER JOIN" entre os dois "DataFrames". Em
seguida, apresentar o número de valores faltantes por coluna da junção obtida.
Apresentar também uma cópia dessa junção em que as linhas com valores faltantes
tenham sido removidas. Apresentar uma nova cópia da junção em que as colunas com
valores faltantes tenham sido removidas. Por fim, apresentar uma outra cópia da junção
em que as colunas com valores faltantes sejam preenchidas com um valor informado pelo
usuário.
"""

import pandas as pd
inner_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "inner")
inner_join.head ()

inner_join.isnull ().sum ()

import pandas as pd

inner_join.dropna (axis = 0, inplace = True)

inner_join.isnull ().sum ()

"""4. Apresentar os registros resultantes do "LEFT JOIN" entre os dois "DataFrames". Em
seguida, apresentar o número de valores faltantes por coluna da junção obtida.
Apresentar também uma cópia dessa junção em que as linhas com valores faltantes
tenham sido removidas. Apresentar uma nova cópia da junção em que as colunas com
valores faltantes tenham sido removidas. Por fim, apresentar uma outra cópia da junção
em que as colunas com valores faltantes sejam preenchidas com um valor informado pelo
usuário.
"""

import pandas as pd
left_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "left")
left_join.head ()

left_join.isnull ().sum ()

#Remover os registros (linhas) em que as colunas possuem valores faltantes:
import pandas as pd
left_joinaux =  left_join.dropna (axis = "index", inplace = False)
left_joinaux.isnull ()

#Remover as colunas que possuem valores faltantes:
import pandas as pd

left_joinaux = left_join.dropna (axis = 1, inplace = False)
left_joinaux.isnull ().sum ()

#Substituir valores faltantes nas colunas:
import pandas as pd
num = int(input('Número: '))
left_joinaux = left_join.fillna (num, inplace = False)
left_joinaux.isnull()

"""5. Apresentar os registros resultantes do "RIGHT JOIN" entre os dois "DataFrames". Em
seguida, apresentar o número de valores faltantes por coluna da junção obtida.
Apresentar também uma cópia dessa junção em que as linhas com valores faltantes
tenham sido removidas. Apresentar uma nova cópia da junção em que as colunas com
valores faltantes tenham sido removidas. Por fim, apresentar uma outra cópia da junção em que as colunas com valores faltantes sejam preenchidas com um valor informado pelo
usuário.
"""

import pandas as pd
right_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "right")
right_join.head ()

right_join.isnull ().sum ()

#Remover os registros (linhas) em que as colunas possuem valores faltantes:
import pandas as pd
right_joinaux =  right_join.dropna (axis = "index", inplace = False)
right_joinaux.isnull ()

#Remover as colunas que possuem valores faltantes:
import pandas as pd
right_joinaux = right_join.dropna (axis = 1, inplace = False)
right_joinaux.isnull ()

"""6. Apresentar os registros resultantes do "OUTER JOIN" entre os dois "DataFrames". Em
seguida, apresentar o número de valores faltantes por coluna da junção obtida.
Apresentar também uma cópia dessa junção em que as linhas com valores faltantes
tenham sido removidas. Apresentar uma nova cópia da junção em que as colunas com
valores faltantes tenham sido removidas. Por fim, apresentar uma outra cópia da junção
em que as colunas com valores faltantes sejam preenchidas com um valor informado pelo
usuário.
"""

import pandas as pd
outer_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "outer")
outer_join.head ()

outer_join.isnull ().sum ()

#Remover os registros (linhas) em que as colunas possuem valores faltantes:
import pandas as pd
outer_joinaux =  outer_join.dropna (axis = "index", inplace = False)
outer_joinaux.isnull ()

#Remover os registros em que as colunas possuem valores faltantes:
import pandas as pd
outer_joinaux =  outer_join.dropna (axis = 1, inplace = False)
outer_joinaux.isnull ()

#Substituir valores faltantes nas colunas:
import pandas as pd
num = int(input('Número: '))
outer_joinaux = left_join.fillna (num, axis= 1,  inplace = False)
outer_joinaux.isnull()