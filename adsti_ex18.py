# -*- coding: utf-8 -*-
"""ADSTI_EX18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FmXUimgdPJTo84RiS2q349T7-cGGVqf_

# **Carregamento**
"""

#Carregamento do primeiro dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("olist_orders_dataset.csv", "wb").write (src)

#Carregamento do segundo dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("olist_order_items_dataset.csv", "wb").write (src)

"""# **Uso**"""

#Leitura do dataset de pedidos para um DataFrame:
import pandas as pd
pedidos = pd.read_csv ("olist_orders_dataset.csv", sep = ",")
print (type (pedidos))

#Leitura dos primeiros registros do dataset:
import pandas as pd
pedidos.head ()

#Leitura do dataset dos itens dos pedidos para um outro DataFrame:
import pandas as pd
itens = pd.read_csv ("olist_order_items_dataset.csv", sep = ",")
print (type (itens))

#Leitura dos primeiros registros do dataset:
import pandas as pd
itens.head ()

"""# **INNER JOIN**"""

#INNER JOIN:
import pandas as pd
inner_join = pd.merge (pedidos[["order_id", "order_status", "order_approved_at"]],
 itens[["order_id", "product_id", "seller_id", "price", "freight_value"]],
 on = "order_id",
 how = "inner")
inner_join.head (10)

#INNER JOIN:
import pandas as pd
inner_join = pd.merge (pedidos[["order_id", "order_status", "order_approved_at"]],
 itens[["order_id", "product_id", "seller_id", "price", "freight_value"]],
 on = "order_id")
inner_join.head (10)

"""# **LEFT JOIN**"""

#LEFT JOIN:
import pandas as pd
inner_join = pd.merge (pedidos[["order_id", "order_status", "order_approved_at"]],
 itens[["order_id", "product_id", "seller_id", "price", "freight_value"]],
 on = "order_id",
 how = "left")
inner_join.head (10)

"""# **RIGHT JOIN**"""

#RIGHT JOIN:
import pandas as pd
inner_join = pd.merge (pedidos[["order_id", "order_status", "order_approved_at"]],
 itens[["order_id", "product_id", "seller_id", "price", "freight_value"]],
 on = "order_id",
 how = "right")
inner_join.head (10)

"""# **OUTER JOIN**"""

#OUTER JOIN:
import pandas as pd
inner_join = pd.merge (pedidos[["order_id", "order_status", "order_approved_at"]],
 itens[["order_id", "product_id", "seller_id", "price", "freight_value"]],
 on = "order_id",
 how = "outer")
inner_join.head (10)

"""# **Exercício**"""

"""
Tabela Funcionário:
1 Ana Conda
2 Python Lang
23 Colab Notebook
79 Jupyter Notebook
108 Pandas Frame
122 NumPy Arrays
1526 Matplot Lib
"""
#Dicionário de funcionários:
funcionarios = {"código": ["1", "2", "23", "79", "108", "122", "1526"],
 "funcionário": ["Ana Conda", "Python Lang", "Colab Notebook", "Jupyter Notebook", "Pandas Frame", "NumPy Arrays", "Matplot Lib"]}
"""
Tabela Departamento:
1 Biblioteca
20 Compras
23 Desenvolvimento
34 Vendas
54 Atendimento ao Cliente
78 Logística
159 Administração
"""
#Dicionário de departamentos:
departamentos = {"funcionário": ["1", "20", "23", "34", "54", "78", "159"],
 "departamento": ["Biblioteca", "Compras", "Desenvolvimento", "Vendas", "Atendimento ao Cliente", "Logística", "Administração"]}
#Importar a biblioteca Pandas:
import pandas as pd
#Converter os dicionarios em DataFrames da biblioteca Pandas:
func = pd.DataFrame (data = funcionarios)
dept = pd.DataFrame (data = departamentos)
#Visualizar os DataFrames:
print ("\n\nDataFrame de funcionários:")
print (func.head (7))
print ("\n\nDataFrame de departamentos:")
print (dept.head (7))

#INNER JOIN:
import pandas as pd
inner_join = pd.merge (func, dept, left_on = "código", right_on = "funcionário")
inner_join.head (10)

#INNER JOIN:
import pandas as pd
inner_join = pd.merge (func, dept, left_on = "código", right_on = "funcionário")
inner_join.columns = ["código do funcionário", "nome do funcionário", "código do funcionário", "nome do departamento"]
inner_join.head (10)

"""2. Gere um "DataFrame" empregando "LEFT JOIN". Apresente os registros do "DataFrame".
Também apresente comentários Markdown que identifiquem e expliquem sua solução.
"""

#LEFT JOIN:
import pandas as pd
inner_join = pd.merge (func, dept, left_on = "código", right_on = "funcionário")
inner_join.columns = ["codigofuncionario", "nomedofuncionario", "codigodofuncionario", "nomedodepartamento"],
on="codigodofuncionario",
row="left"
inner_join.head (10)

"""# 5.

# **Carregamento**
"""

#Carregamento do primeiro dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("datasets_549702_1228846_brazil_covid19.csv", "wb").write (src)

#Carregamento do segundo dataset:
from google.colab import files
src = list (files.upload ().values ())[0]
open ("brazil_covid19_cities.csv", "wb").write (src)

"""# **Uso**"""

#Leitura do dataset do brazil para um DataFrame:
import pandas as pd
brazil = pd.read_csv ("datasets_549702_1228846_brazil_covid19.csv", sep = ",")
print (type (brazil))

#Leitura do dataset do cidades para um DataFrame:
import pandas as pd
cities = pd.read_csv ("brazil_covid19_cities.csv", sep = ",")
print (type (cities))

"""a) Apresente os 15 primeiros registros de cada "DataFrame""""

#Leitura dos primeiros registros do dataset:
import pandas as pd
brazil.head (15)

#Leitura dos primeiros registros do dataset:
import pandas as pd
cities.head (15)

"""b) Apresentar os registros resultantes do "INNER JOIN" entre os dois "DataFrames"."""

import pandas as pd
inner_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "inner")
inner_join.head ()

"""c) Apresentar os registros resultantes do "LEFT JOIN" entre os dois "DataFrames"."""

#LEFT JOIN:
import pandas as pd
inner_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths", "state"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "left")
inner_join.head (10)

"""d) Apresentar os registros resultantes do "RIGHT JOIN" entre os dois "DataFrames"."""

#RIGHT JOIN:
import pandas as pd
inner_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths", "state"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "right")
inner_join.head (10)

"""e) Apresentar os registros resultantes do "OUTER JOIN" entre os dois "DataFrames"."""

import pandas as pd
inner_join = pd.merge (brazil[["date", "region", "state", "cases", "deaths", "state"]],
 cities[["date", "state", "name", "code", "cases", "deaths"]],
 on = "date",
 how = "outer")
inner_join.head (10)

"""f) Apresentar todos os dados das cidades de Santa Catarina"""

import pandas as pd
cities[cities["state"] == "Santa Catarina"]

"""g) Apresentar o número de registros envolvendo cidades do Mato Grosso."""

import pandas as pd
cities[cities["state"] == "Mato Grosso"]

"""h) Apresentar os registros das cidades de Tocantins com mais de 300 casos."""

import pandas as pd
cities.loc[(cities["cases"] > 300) & (cities["state"] == "Tocantins") ]

"""i) Apresentar os registros das cidades do Pará com mais de 200 mortes"""

import pandas as pd
cities.loc[(cities["deaths"] > 200) & (cities["state"] == "Pará") ]

"""j) Apresentar os registros das cidades com mais de 1.000 mortes em estados com mais
de 10.000 casos, ordenando os registros pelo nome do estado.
"""

import pandas as pd

cities.loc[(cities["deaths"] > 1000)].sort_values(by = "state")